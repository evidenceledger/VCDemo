// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hesusruiz/vcbackend/ent/naturalperson"
)

// NaturalPerson is the model entity for the NaturalPerson schema.
type NaturalPerson struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Displayname holds the value of the "displayname" field.
	Displayname string `json:"displayname,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Password holds the value of the "password" field.
	Password []byte `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NaturalPersonQuery when eager-loading is set.
	Edges NaturalPersonEdges `json:"edges"`
}

// NaturalPersonEdges holds the relations/edges for other nodes in the graph.
type NaturalPersonEdges struct {
	// Keys holds the value of the keys edge.
	Keys []*PrivateKey `json:"keys,omitempty"`
	// Credentials holds the value of the credentials edge.
	Credentials []*Credential `json:"credentials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KeysOrErr returns the Keys value or an error if the edge
// was not loaded in eager-loading.
func (e NaturalPersonEdges) KeysOrErr() ([]*PrivateKey, error) {
	if e.loadedTypes[0] {
		return e.Keys, nil
	}
	return nil, &NotLoadedError{edge: "keys"}
}

// CredentialsOrErr returns the Credentials value or an error if the edge
// was not loaded in eager-loading.
func (e NaturalPersonEdges) CredentialsOrErr() ([]*Credential, error) {
	if e.loadedTypes[1] {
		return e.Credentials, nil
	}
	return nil, &NotLoadedError{edge: "credentials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NaturalPerson) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case naturalperson.FieldPassword:
			values[i] = new([]byte)
		case naturalperson.FieldID, naturalperson.FieldName, naturalperson.FieldDisplayname, naturalperson.FieldType:
			values[i] = new(sql.NullString)
		case naturalperson.FieldCreatedAt, naturalperson.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NaturalPerson", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NaturalPerson fields.
func (np *NaturalPerson) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case naturalperson.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				np.ID = value.String
			}
		case naturalperson.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				np.Name = value.String
			}
		case naturalperson.FieldDisplayname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field displayname", values[i])
			} else if value.Valid {
				np.Displayname = value.String
			}
		case naturalperson.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				np.Type = value.String
			}
		case naturalperson.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				np.Password = *value
			}
		case naturalperson.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				np.CreatedAt = value.Time
			}
		case naturalperson.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				np.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryKeys queries the "keys" edge of the NaturalPerson entity.
func (np *NaturalPerson) QueryKeys() *PrivateKeyQuery {
	return (&NaturalPersonClient{config: np.config}).QueryKeys(np)
}

// QueryCredentials queries the "credentials" edge of the NaturalPerson entity.
func (np *NaturalPerson) QueryCredentials() *CredentialQuery {
	return (&NaturalPersonClient{config: np.config}).QueryCredentials(np)
}

// Update returns a builder for updating this NaturalPerson.
// Note that you need to call NaturalPerson.Unwrap() before calling this method if this NaturalPerson
// was returned from a transaction, and the transaction was committed or rolled back.
func (np *NaturalPerson) Update() *NaturalPersonUpdateOne {
	return (&NaturalPersonClient{config: np.config}).UpdateOne(np)
}

// Unwrap unwraps the NaturalPerson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (np *NaturalPerson) Unwrap() *NaturalPerson {
	_tx, ok := np.config.driver.(*txDriver)
	if !ok {
		panic("ent: NaturalPerson is not a transactional entity")
	}
	np.config.driver = _tx.drv
	return np
}

// String implements the fmt.Stringer.
func (np *NaturalPerson) String() string {
	var builder strings.Builder
	builder.WriteString("NaturalPerson(")
	builder.WriteString(fmt.Sprintf("id=%v, ", np.ID))
	builder.WriteString("name=")
	builder.WriteString(np.Name)
	builder.WriteString(", ")
	builder.WriteString("displayname=")
	builder.WriteString(np.Displayname)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(np.Type)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(np.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(np.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NaturalPersons is a parsable slice of NaturalPerson.
type NaturalPersons []*NaturalPerson

func (np NaturalPersons) config(cfg config) {
	for _i := range np {
		np[_i].config = cfg
	}
}
