// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hesusruiz/vcbackend/ent/credential"
	"github.com/hesusruiz/vcbackend/ent/naturalperson"
	"github.com/hesusruiz/vcbackend/ent/privatekey"
)

// NaturalPersonCreate is the builder for creating a NaturalPerson entity.
type NaturalPersonCreate struct {
	config
	mutation *NaturalPersonMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (npc *NaturalPersonCreate) SetName(s string) *NaturalPersonCreate {
	npc.mutation.SetName(s)
	return npc
}

// SetDisplayname sets the "displayname" field.
func (npc *NaturalPersonCreate) SetDisplayname(s string) *NaturalPersonCreate {
	npc.mutation.SetDisplayname(s)
	return npc
}

// SetNillableDisplayname sets the "displayname" field if the given value is not nil.
func (npc *NaturalPersonCreate) SetNillableDisplayname(s *string) *NaturalPersonCreate {
	if s != nil {
		npc.SetDisplayname(*s)
	}
	return npc
}

// SetType sets the "type" field.
func (npc *NaturalPersonCreate) SetType(s string) *NaturalPersonCreate {
	npc.mutation.SetType(s)
	return npc
}

// SetPassword sets the "password" field.
func (npc *NaturalPersonCreate) SetPassword(b []byte) *NaturalPersonCreate {
	npc.mutation.SetPassword(b)
	return npc
}

// SetCreatedAt sets the "created_at" field.
func (npc *NaturalPersonCreate) SetCreatedAt(t time.Time) *NaturalPersonCreate {
	npc.mutation.SetCreatedAt(t)
	return npc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (npc *NaturalPersonCreate) SetNillableCreatedAt(t *time.Time) *NaturalPersonCreate {
	if t != nil {
		npc.SetCreatedAt(*t)
	}
	return npc
}

// SetUpdatedAt sets the "updated_at" field.
func (npc *NaturalPersonCreate) SetUpdatedAt(t time.Time) *NaturalPersonCreate {
	npc.mutation.SetUpdatedAt(t)
	return npc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (npc *NaturalPersonCreate) SetNillableUpdatedAt(t *time.Time) *NaturalPersonCreate {
	if t != nil {
		npc.SetUpdatedAt(*t)
	}
	return npc
}

// SetID sets the "id" field.
func (npc *NaturalPersonCreate) SetID(s string) *NaturalPersonCreate {
	npc.mutation.SetID(s)
	return npc
}

// AddKeyIDs adds the "keys" edge to the PrivateKey entity by IDs.
func (npc *NaturalPersonCreate) AddKeyIDs(ids ...string) *NaturalPersonCreate {
	npc.mutation.AddKeyIDs(ids...)
	return npc
}

// AddKeys adds the "keys" edges to the PrivateKey entity.
func (npc *NaturalPersonCreate) AddKeys(p ...*PrivateKey) *NaturalPersonCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return npc.AddKeyIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (npc *NaturalPersonCreate) AddCredentialIDs(ids ...string) *NaturalPersonCreate {
	npc.mutation.AddCredentialIDs(ids...)
	return npc
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (npc *NaturalPersonCreate) AddCredentials(c ...*Credential) *NaturalPersonCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return npc.AddCredentialIDs(ids...)
}

// Mutation returns the NaturalPersonMutation object of the builder.
func (npc *NaturalPersonCreate) Mutation() *NaturalPersonMutation {
	return npc.mutation
}

// Save creates the NaturalPerson in the database.
func (npc *NaturalPersonCreate) Save(ctx context.Context) (*NaturalPerson, error) {
	var (
		err  error
		node *NaturalPerson
	)
	npc.defaults()
	if len(npc.hooks) == 0 {
		if err = npc.check(); err != nil {
			return nil, err
		}
		node, err = npc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NaturalPersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = npc.check(); err != nil {
				return nil, err
			}
			npc.mutation = mutation
			if node, err = npc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(npc.hooks) - 1; i >= 0; i-- {
			if npc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = npc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, npc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NaturalPerson)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NaturalPersonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (npc *NaturalPersonCreate) SaveX(ctx context.Context) *NaturalPerson {
	v, err := npc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npc *NaturalPersonCreate) Exec(ctx context.Context) error {
	_, err := npc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npc *NaturalPersonCreate) ExecX(ctx context.Context) {
	if err := npc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npc *NaturalPersonCreate) defaults() {
	if _, ok := npc.mutation.CreatedAt(); !ok {
		v := naturalperson.DefaultCreatedAt()
		npc.mutation.SetCreatedAt(v)
	}
	if _, ok := npc.mutation.UpdatedAt(); !ok {
		v := naturalperson.DefaultUpdatedAt()
		npc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npc *NaturalPersonCreate) check() error {
	if _, ok := npc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "NaturalPerson.name"`)}
	}
	if v, ok := npc.mutation.Name(); ok {
		if err := naturalperson.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NaturalPerson.name": %w`, err)}
		}
	}
	if _, ok := npc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "NaturalPerson.type"`)}
	}
	if v, ok := npc.mutation.GetType(); ok {
		if err := naturalperson.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "NaturalPerson.type": %w`, err)}
		}
	}
	if _, ok := npc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "NaturalPerson.password"`)}
	}
	if v, ok := npc.mutation.Password(); ok {
		if err := naturalperson.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "NaturalPerson.password": %w`, err)}
		}
	}
	if _, ok := npc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NaturalPerson.created_at"`)}
	}
	if _, ok := npc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NaturalPerson.updated_at"`)}
	}
	if v, ok := npc.mutation.ID(); ok {
		if err := naturalperson.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "NaturalPerson.id": %w`, err)}
		}
	}
	return nil
}

func (npc *NaturalPersonCreate) sqlSave(ctx context.Context) (*NaturalPerson, error) {
	_node, _spec := npc.createSpec()
	if err := sqlgraph.CreateNode(ctx, npc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NaturalPerson.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (npc *NaturalPersonCreate) createSpec() (*NaturalPerson, *sqlgraph.CreateSpec) {
	var (
		_node = &NaturalPerson{config: npc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: naturalperson.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: naturalperson.FieldID,
			},
		}
	)
	if id, ok := npc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := npc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: naturalperson.FieldName,
		})
		_node.Name = value
	}
	if value, ok := npc.mutation.Displayname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: naturalperson.FieldDisplayname,
		})
		_node.Displayname = value
	}
	if value, ok := npc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: naturalperson.FieldType,
		})
		_node.Type = value
	}
	if value, ok := npc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: naturalperson.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := npc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: naturalperson.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := npc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: naturalperson.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := npc.mutation.KeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   naturalperson.KeysTable,
			Columns: []string{naturalperson.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatekey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := npc.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   naturalperson.CredentialsTable,
			Columns: []string{naturalperson.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NaturalPersonCreateBulk is the builder for creating many NaturalPerson entities in bulk.
type NaturalPersonCreateBulk struct {
	config
	builders []*NaturalPersonCreate
}

// Save creates the NaturalPerson entities in the database.
func (npcb *NaturalPersonCreateBulk) Save(ctx context.Context) ([]*NaturalPerson, error) {
	specs := make([]*sqlgraph.CreateSpec, len(npcb.builders))
	nodes := make([]*NaturalPerson, len(npcb.builders))
	mutators := make([]Mutator, len(npcb.builders))
	for i := range npcb.builders {
		func(i int, root context.Context) {
			builder := npcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NaturalPersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, npcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, npcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, npcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (npcb *NaturalPersonCreateBulk) SaveX(ctx context.Context) []*NaturalPerson {
	v, err := npcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npcb *NaturalPersonCreateBulk) Exec(ctx context.Context) error {
	_, err := npcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcb *NaturalPersonCreateBulk) ExecX(ctx context.Context) {
	if err := npcb.Exec(ctx); err != nil {
		panic(err)
	}
}
