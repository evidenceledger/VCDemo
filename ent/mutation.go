// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/duo-labs/webauthn/webauthn"
	"github.com/hesusruiz/vcbackend/ent/credential"
	"github.com/hesusruiz/vcbackend/ent/did"
	"github.com/hesusruiz/vcbackend/ent/naturalperson"
	"github.com/hesusruiz/vcbackend/ent/predicate"
	"github.com/hesusruiz/vcbackend/ent/privatekey"
	"github.com/hesusruiz/vcbackend/ent/publickey"
	"github.com/hesusruiz/vcbackend/ent/user"
	"github.com/hesusruiz/vcbackend/ent/webauthncredential"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCredential         = "Credential"
	TypeDID                = "DID"
	TypeNaturalPerson      = "NaturalPerson"
	TypePrivateKey         = "PrivateKey"
	TypePublicKey          = "PublicKey"
	TypeUser               = "User"
	TypeWebauthnCredential = "WebauthnCredential"
)

// CredentialMutation represents an operation that mutates the Credential nodes in the graph.
type CredentialMutation struct {
	config
	op             Op
	typ            string
	id             *string
	_type          *string
	raw            *[]uint8
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	account        *string
	clearedaccount bool
	done           bool
	oldValue       func(context.Context) (*Credential, error)
	predicates     []predicate.Credential
}

var _ ent.Mutation = (*CredentialMutation)(nil)

// credentialOption allows management of the mutation configuration using functional options.
type credentialOption func(*CredentialMutation)

// newCredentialMutation creates new mutation for the Credential entity.
func newCredentialMutation(c config, op Op, opts ...credentialOption) *CredentialMutation {
	m := &CredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCredentialID sets the ID field of the mutation.
func withCredentialID(id string) credentialOption {
	return func(m *CredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *Credential
		)
		m.oldValue = func(ctx context.Context) (*Credential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Credential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCredential sets the old Credential of the mutation.
func withCredential(node *Credential) credentialOption {
	return func(m *CredentialMutation) {
		m.oldValue = func(context.Context) (*Credential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Credential entities.
func (m *CredentialMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CredentialMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CredentialMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Credential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *CredentialMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *CredentialMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CredentialMutation) ResetType() {
	m._type = nil
}

// SetRaw sets the "raw" field.
func (m *CredentialMutation) SetRaw(u []uint8) {
	m.raw = &u
}

// Raw returns the value of the "raw" field in the mutation.
func (m *CredentialMutation) Raw() (r []uint8, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldRaw(ctx context.Context) (v []uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *CredentialMutation) ResetRaw() {
	m.raw = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CredentialMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CredentialMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CredentialMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CredentialMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CredentialMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Credential entity.
// If the Credential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CredentialMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CredentialMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAccountID sets the "account" edge to the User entity by id.
func (m *CredentialMutation) SetAccountID(id string) {
	m.account = &id
}

// ClearAccount clears the "account" edge to the User entity.
func (m *CredentialMutation) ClearAccount() {
	m.clearedaccount = true
}

// AccountCleared reports if the "account" edge to the User entity was cleared.
func (m *CredentialMutation) AccountCleared() bool {
	return m.clearedaccount
}

// AccountID returns the "account" edge ID in the mutation.
func (m *CredentialMutation) AccountID() (id string, exists bool) {
	if m.account != nil {
		return *m.account, true
	}
	return
}

// AccountIDs returns the "account" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccountID instead. It exists only for internal usage by the builders.
func (m *CredentialMutation) AccountIDs() (ids []string) {
	if id := m.account; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccount resets all changes to the "account" edge.
func (m *CredentialMutation) ResetAccount() {
	m.account = nil
	m.clearedaccount = false
}

// Where appends a list predicates to the CredentialMutation builder.
func (m *CredentialMutation) Where(ps ...predicate.Credential) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CredentialMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Credential).
func (m *CredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CredentialMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._type != nil {
		fields = append(fields, credential.FieldType)
	}
	if m.raw != nil {
		fields = append(fields, credential.FieldRaw)
	}
	if m.created_at != nil {
		fields = append(fields, credential.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, credential.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case credential.FieldType:
		return m.GetType()
	case credential.FieldRaw:
		return m.Raw()
	case credential.FieldCreatedAt:
		return m.CreatedAt()
	case credential.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case credential.FieldType:
		return m.OldType(ctx)
	case credential.FieldRaw:
		return m.OldRaw(ctx)
	case credential.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case credential.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Credential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case credential.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case credential.FieldRaw:
		v, ok := value.([]uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	case credential.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case credential.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Credential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CredentialMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CredentialMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Credential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CredentialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CredentialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Credential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CredentialMutation) ResetField(name string) error {
	switch name {
	case credential.FieldType:
		m.ResetType()
		return nil
	case credential.FieldRaw:
		m.ResetRaw()
		return nil
	case credential.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case credential.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Credential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.account != nil {
		edges = append(edges, credential.EdgeAccount)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CredentialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case credential.EdgeAccount:
		if id := m.account; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CredentialMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaccount {
		edges = append(edges, credential.EdgeAccount)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CredentialMutation) EdgeCleared(name string) bool {
	switch name {
	case credential.EdgeAccount:
		return m.clearedaccount
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CredentialMutation) ClearEdge(name string) error {
	switch name {
	case credential.EdgeAccount:
		m.ClearAccount()
		return nil
	}
	return fmt.Errorf("unknown Credential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CredentialMutation) ResetEdge(name string) error {
	switch name {
	case credential.EdgeAccount:
		m.ResetAccount()
		return nil
	}
	return fmt.Errorf("unknown Credential edge %s", name)
}

// DIDMutation represents an operation that mutates the DID nodes in the graph.
type DIDMutation struct {
	config
	op            Op
	typ           string
	id            *string
	privatekey    *[]byte
	method        *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*DID, error)
	predicates    []predicate.DID
}

var _ ent.Mutation = (*DIDMutation)(nil)

// didOption allows management of the mutation configuration using functional options.
type didOption func(*DIDMutation)

// newDIDMutation creates new mutation for the DID entity.
func newDIDMutation(c config, op Op, opts ...didOption) *DIDMutation {
	m := &DIDMutation{
		config:        c,
		op:            op,
		typ:           TypeDID,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDIDID sets the ID field of the mutation.
func withDIDID(id string) didOption {
	return func(m *DIDMutation) {
		var (
			err   error
			once  sync.Once
			value *DID
		)
		m.oldValue = func(ctx context.Context) (*DID, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DID.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDID sets the old DID of the mutation.
func withDID(node *DID) didOption {
	return func(m *DIDMutation) {
		m.oldValue = func(context.Context) (*DID, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DIDMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DIDMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DID entities.
func (m *DIDMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DIDMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DIDMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DID.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrivatekey sets the "privatekey" field.
func (m *DIDMutation) SetPrivatekey(b []byte) {
	m.privatekey = &b
}

// Privatekey returns the value of the "privatekey" field in the mutation.
func (m *DIDMutation) Privatekey() (r []byte, exists bool) {
	v := m.privatekey
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivatekey returns the old "privatekey" field's value of the DID entity.
// If the DID object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DIDMutation) OldPrivatekey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivatekey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivatekey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivatekey: %w", err)
	}
	return oldValue.Privatekey, nil
}

// ResetPrivatekey resets all changes to the "privatekey" field.
func (m *DIDMutation) ResetPrivatekey() {
	m.privatekey = nil
}

// SetMethod sets the "method" field.
func (m *DIDMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *DIDMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the DID entity.
// If the DID object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DIDMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *DIDMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[did.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *DIDMutation) MethodCleared() bool {
	_, ok := m.clearedFields[did.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *DIDMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, did.FieldMethod)
}

// SetCreatedAt sets the "created_at" field.
func (m *DIDMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DIDMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DID entity.
// If the DID object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DIDMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DIDMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DIDMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DIDMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DID entity.
// If the DID object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DIDMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DIDMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *DIDMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *DIDMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DIDMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *DIDMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DIDMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DIDMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the DIDMutation builder.
func (m *DIDMutation) Where(ps ...predicate.DID) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DIDMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DID).
func (m *DIDMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DIDMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.privatekey != nil {
		fields = append(fields, did.FieldPrivatekey)
	}
	if m.method != nil {
		fields = append(fields, did.FieldMethod)
	}
	if m.created_at != nil {
		fields = append(fields, did.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, did.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DIDMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case did.FieldPrivatekey:
		return m.Privatekey()
	case did.FieldMethod:
		return m.Method()
	case did.FieldCreatedAt:
		return m.CreatedAt()
	case did.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DIDMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case did.FieldPrivatekey:
		return m.OldPrivatekey(ctx)
	case did.FieldMethod:
		return m.OldMethod(ctx)
	case did.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case did.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DID field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DIDMutation) SetField(name string, value ent.Value) error {
	switch name {
	case did.FieldPrivatekey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivatekey(v)
		return nil
	case did.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case did.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case did.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DID field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DIDMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DIDMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DIDMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DID numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DIDMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(did.FieldMethod) {
		fields = append(fields, did.FieldMethod)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DIDMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DIDMutation) ClearField(name string) error {
	switch name {
	case did.FieldMethod:
		m.ClearMethod()
		return nil
	}
	return fmt.Errorf("unknown DID nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DIDMutation) ResetField(name string) error {
	switch name {
	case did.FieldPrivatekey:
		m.ResetPrivatekey()
		return nil
	case did.FieldMethod:
		m.ResetMethod()
		return nil
	case did.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case did.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DID field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DIDMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, did.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DIDMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case did.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DIDMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DIDMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DIDMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, did.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DIDMutation) EdgeCleared(name string) bool {
	switch name {
	case did.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DIDMutation) ClearEdge(name string) error {
	switch name {
	case did.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown DID unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DIDMutation) ResetEdge(name string) error {
	switch name {
	case did.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown DID edge %s", name)
}

// NaturalPersonMutation represents an operation that mutates the NaturalPerson nodes in the graph.
type NaturalPersonMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	name               *string
	displayname        *string
	_type              *string
	password           *[]byte
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	keys               map[string]struct{}
	removedkeys        map[string]struct{}
	clearedkeys        bool
	credentials        map[string]struct{}
	removedcredentials map[string]struct{}
	clearedcredentials bool
	done               bool
	oldValue           func(context.Context) (*NaturalPerson, error)
	predicates         []predicate.NaturalPerson
}

var _ ent.Mutation = (*NaturalPersonMutation)(nil)

// naturalpersonOption allows management of the mutation configuration using functional options.
type naturalpersonOption func(*NaturalPersonMutation)

// newNaturalPersonMutation creates new mutation for the NaturalPerson entity.
func newNaturalPersonMutation(c config, op Op, opts ...naturalpersonOption) *NaturalPersonMutation {
	m := &NaturalPersonMutation{
		config:        c,
		op:            op,
		typ:           TypeNaturalPerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNaturalPersonID sets the ID field of the mutation.
func withNaturalPersonID(id string) naturalpersonOption {
	return func(m *NaturalPersonMutation) {
		var (
			err   error
			once  sync.Once
			value *NaturalPerson
		)
		m.oldValue = func(ctx context.Context) (*NaturalPerson, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NaturalPerson.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNaturalPerson sets the old NaturalPerson of the mutation.
func withNaturalPerson(node *NaturalPerson) naturalpersonOption {
	return func(m *NaturalPersonMutation) {
		m.oldValue = func(context.Context) (*NaturalPerson, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NaturalPersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NaturalPersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NaturalPerson entities.
func (m *NaturalPersonMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NaturalPersonMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NaturalPersonMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NaturalPerson.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *NaturalPersonMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NaturalPersonMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NaturalPerson entity.
// If the NaturalPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NaturalPersonMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NaturalPersonMutation) ResetName() {
	m.name = nil
}

// SetDisplayname sets the "displayname" field.
func (m *NaturalPersonMutation) SetDisplayname(s string) {
	m.displayname = &s
}

// Displayname returns the value of the "displayname" field in the mutation.
func (m *NaturalPersonMutation) Displayname() (r string, exists bool) {
	v := m.displayname
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayname returns the old "displayname" field's value of the NaturalPerson entity.
// If the NaturalPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NaturalPersonMutation) OldDisplayname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayname: %w", err)
	}
	return oldValue.Displayname, nil
}

// ClearDisplayname clears the value of the "displayname" field.
func (m *NaturalPersonMutation) ClearDisplayname() {
	m.displayname = nil
	m.clearedFields[naturalperson.FieldDisplayname] = struct{}{}
}

// DisplaynameCleared returns if the "displayname" field was cleared in this mutation.
func (m *NaturalPersonMutation) DisplaynameCleared() bool {
	_, ok := m.clearedFields[naturalperson.FieldDisplayname]
	return ok
}

// ResetDisplayname resets all changes to the "displayname" field.
func (m *NaturalPersonMutation) ResetDisplayname() {
	m.displayname = nil
	delete(m.clearedFields, naturalperson.FieldDisplayname)
}

// SetType sets the "type" field.
func (m *NaturalPersonMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *NaturalPersonMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the NaturalPerson entity.
// If the NaturalPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NaturalPersonMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *NaturalPersonMutation) ResetType() {
	m._type = nil
}

// SetPassword sets the "password" field.
func (m *NaturalPersonMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *NaturalPersonMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the NaturalPerson entity.
// If the NaturalPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NaturalPersonMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *NaturalPersonMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *NaturalPersonMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NaturalPersonMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NaturalPerson entity.
// If the NaturalPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NaturalPersonMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NaturalPersonMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NaturalPersonMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NaturalPersonMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the NaturalPerson entity.
// If the NaturalPerson object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NaturalPersonMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NaturalPersonMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddKeyIDs adds the "keys" edge to the PrivateKey entity by ids.
func (m *NaturalPersonMutation) AddKeyIDs(ids ...string) {
	if m.keys == nil {
		m.keys = make(map[string]struct{})
	}
	for i := range ids {
		m.keys[ids[i]] = struct{}{}
	}
}

// ClearKeys clears the "keys" edge to the PrivateKey entity.
func (m *NaturalPersonMutation) ClearKeys() {
	m.clearedkeys = true
}

// KeysCleared reports if the "keys" edge to the PrivateKey entity was cleared.
func (m *NaturalPersonMutation) KeysCleared() bool {
	return m.clearedkeys
}

// RemoveKeyIDs removes the "keys" edge to the PrivateKey entity by IDs.
func (m *NaturalPersonMutation) RemoveKeyIDs(ids ...string) {
	if m.removedkeys == nil {
		m.removedkeys = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.keys, ids[i])
		m.removedkeys[ids[i]] = struct{}{}
	}
}

// RemovedKeys returns the removed IDs of the "keys" edge to the PrivateKey entity.
func (m *NaturalPersonMutation) RemovedKeysIDs() (ids []string) {
	for id := range m.removedkeys {
		ids = append(ids, id)
	}
	return
}

// KeysIDs returns the "keys" edge IDs in the mutation.
func (m *NaturalPersonMutation) KeysIDs() (ids []string) {
	for id := range m.keys {
		ids = append(ids, id)
	}
	return
}

// ResetKeys resets all changes to the "keys" edge.
func (m *NaturalPersonMutation) ResetKeys() {
	m.keys = nil
	m.clearedkeys = false
	m.removedkeys = nil
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by ids.
func (m *NaturalPersonMutation) AddCredentialIDs(ids ...string) {
	if m.credentials == nil {
		m.credentials = make(map[string]struct{})
	}
	for i := range ids {
		m.credentials[ids[i]] = struct{}{}
	}
}

// ClearCredentials clears the "credentials" edge to the Credential entity.
func (m *NaturalPersonMutation) ClearCredentials() {
	m.clearedcredentials = true
}

// CredentialsCleared reports if the "credentials" edge to the Credential entity was cleared.
func (m *NaturalPersonMutation) CredentialsCleared() bool {
	return m.clearedcredentials
}

// RemoveCredentialIDs removes the "credentials" edge to the Credential entity by IDs.
func (m *NaturalPersonMutation) RemoveCredentialIDs(ids ...string) {
	if m.removedcredentials == nil {
		m.removedcredentials = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.credentials, ids[i])
		m.removedcredentials[ids[i]] = struct{}{}
	}
}

// RemovedCredentials returns the removed IDs of the "credentials" edge to the Credential entity.
func (m *NaturalPersonMutation) RemovedCredentialsIDs() (ids []string) {
	for id := range m.removedcredentials {
		ids = append(ids, id)
	}
	return
}

// CredentialsIDs returns the "credentials" edge IDs in the mutation.
func (m *NaturalPersonMutation) CredentialsIDs() (ids []string) {
	for id := range m.credentials {
		ids = append(ids, id)
	}
	return
}

// ResetCredentials resets all changes to the "credentials" edge.
func (m *NaturalPersonMutation) ResetCredentials() {
	m.credentials = nil
	m.clearedcredentials = false
	m.removedcredentials = nil
}

// Where appends a list predicates to the NaturalPersonMutation builder.
func (m *NaturalPersonMutation) Where(ps ...predicate.NaturalPerson) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NaturalPersonMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NaturalPerson).
func (m *NaturalPersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NaturalPersonMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, naturalperson.FieldName)
	}
	if m.displayname != nil {
		fields = append(fields, naturalperson.FieldDisplayname)
	}
	if m._type != nil {
		fields = append(fields, naturalperson.FieldType)
	}
	if m.password != nil {
		fields = append(fields, naturalperson.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, naturalperson.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, naturalperson.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NaturalPersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case naturalperson.FieldName:
		return m.Name()
	case naturalperson.FieldDisplayname:
		return m.Displayname()
	case naturalperson.FieldType:
		return m.GetType()
	case naturalperson.FieldPassword:
		return m.Password()
	case naturalperson.FieldCreatedAt:
		return m.CreatedAt()
	case naturalperson.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NaturalPersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case naturalperson.FieldName:
		return m.OldName(ctx)
	case naturalperson.FieldDisplayname:
		return m.OldDisplayname(ctx)
	case naturalperson.FieldType:
		return m.OldType(ctx)
	case naturalperson.FieldPassword:
		return m.OldPassword(ctx)
	case naturalperson.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case naturalperson.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown NaturalPerson field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NaturalPersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case naturalperson.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case naturalperson.FieldDisplayname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayname(v)
		return nil
	case naturalperson.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case naturalperson.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case naturalperson.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case naturalperson.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown NaturalPerson field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NaturalPersonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NaturalPersonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NaturalPersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NaturalPerson numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NaturalPersonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(naturalperson.FieldDisplayname) {
		fields = append(fields, naturalperson.FieldDisplayname)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NaturalPersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NaturalPersonMutation) ClearField(name string) error {
	switch name {
	case naturalperson.FieldDisplayname:
		m.ClearDisplayname()
		return nil
	}
	return fmt.Errorf("unknown NaturalPerson nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NaturalPersonMutation) ResetField(name string) error {
	switch name {
	case naturalperson.FieldName:
		m.ResetName()
		return nil
	case naturalperson.FieldDisplayname:
		m.ResetDisplayname()
		return nil
	case naturalperson.FieldType:
		m.ResetType()
		return nil
	case naturalperson.FieldPassword:
		m.ResetPassword()
		return nil
	case naturalperson.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case naturalperson.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown NaturalPerson field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NaturalPersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.keys != nil {
		edges = append(edges, naturalperson.EdgeKeys)
	}
	if m.credentials != nil {
		edges = append(edges, naturalperson.EdgeCredentials)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NaturalPersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case naturalperson.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.keys))
		for id := range m.keys {
			ids = append(ids, id)
		}
		return ids
	case naturalperson.EdgeCredentials:
		ids := make([]ent.Value, 0, len(m.credentials))
		for id := range m.credentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NaturalPersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedkeys != nil {
		edges = append(edges, naturalperson.EdgeKeys)
	}
	if m.removedcredentials != nil {
		edges = append(edges, naturalperson.EdgeCredentials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NaturalPersonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case naturalperson.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.removedkeys))
		for id := range m.removedkeys {
			ids = append(ids, id)
		}
		return ids
	case naturalperson.EdgeCredentials:
		ids := make([]ent.Value, 0, len(m.removedcredentials))
		for id := range m.removedcredentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NaturalPersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedkeys {
		edges = append(edges, naturalperson.EdgeKeys)
	}
	if m.clearedcredentials {
		edges = append(edges, naturalperson.EdgeCredentials)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NaturalPersonMutation) EdgeCleared(name string) bool {
	switch name {
	case naturalperson.EdgeKeys:
		return m.clearedkeys
	case naturalperson.EdgeCredentials:
		return m.clearedcredentials
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NaturalPersonMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown NaturalPerson unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NaturalPersonMutation) ResetEdge(name string) error {
	switch name {
	case naturalperson.EdgeKeys:
		m.ResetKeys()
		return nil
	case naturalperson.EdgeCredentials:
		m.ResetCredentials()
		return nil
	}
	return fmt.Errorf("unknown NaturalPerson edge %s", name)
}

// PrivateKeyMutation represents an operation that mutates the PrivateKey nodes in the graph.
type PrivateKeyMutation struct {
	config
	op            Op
	typ           string
	id            *string
	kty           *string
	alg           *string
	jwk           *[]uint8
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*PrivateKey, error)
	predicates    []predicate.PrivateKey
}

var _ ent.Mutation = (*PrivateKeyMutation)(nil)

// privatekeyOption allows management of the mutation configuration using functional options.
type privatekeyOption func(*PrivateKeyMutation)

// newPrivateKeyMutation creates new mutation for the PrivateKey entity.
func newPrivateKeyMutation(c config, op Op, opts ...privatekeyOption) *PrivateKeyMutation {
	m := &PrivateKeyMutation{
		config:        c,
		op:            op,
		typ:           TypePrivateKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrivateKeyID sets the ID field of the mutation.
func withPrivateKeyID(id string) privatekeyOption {
	return func(m *PrivateKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *PrivateKey
		)
		m.oldValue = func(ctx context.Context) (*PrivateKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PrivateKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrivateKey sets the old PrivateKey of the mutation.
func withPrivateKey(node *PrivateKey) privatekeyOption {
	return func(m *PrivateKeyMutation) {
		m.oldValue = func(context.Context) (*PrivateKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrivateKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrivateKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PrivateKey entities.
func (m *PrivateKeyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrivateKeyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PrivateKeyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PrivateKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKty sets the "kty" field.
func (m *PrivateKeyMutation) SetKty(s string) {
	m.kty = &s
}

// Kty returns the value of the "kty" field in the mutation.
func (m *PrivateKeyMutation) Kty() (r string, exists bool) {
	v := m.kty
	if v == nil {
		return
	}
	return *v, true
}

// OldKty returns the old "kty" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldKty(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKty: %w", err)
	}
	return oldValue.Kty, nil
}

// ResetKty resets all changes to the "kty" field.
func (m *PrivateKeyMutation) ResetKty() {
	m.kty = nil
}

// SetAlg sets the "alg" field.
func (m *PrivateKeyMutation) SetAlg(s string) {
	m.alg = &s
}

// Alg returns the value of the "alg" field in the mutation.
func (m *PrivateKeyMutation) Alg() (r string, exists bool) {
	v := m.alg
	if v == nil {
		return
	}
	return *v, true
}

// OldAlg returns the old "alg" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldAlg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlg: %w", err)
	}
	return oldValue.Alg, nil
}

// ClearAlg clears the value of the "alg" field.
func (m *PrivateKeyMutation) ClearAlg() {
	m.alg = nil
	m.clearedFields[privatekey.FieldAlg] = struct{}{}
}

// AlgCleared returns if the "alg" field was cleared in this mutation.
func (m *PrivateKeyMutation) AlgCleared() bool {
	_, ok := m.clearedFields[privatekey.FieldAlg]
	return ok
}

// ResetAlg resets all changes to the "alg" field.
func (m *PrivateKeyMutation) ResetAlg() {
	m.alg = nil
	delete(m.clearedFields, privatekey.FieldAlg)
}

// SetJwk sets the "jwk" field.
func (m *PrivateKeyMutation) SetJwk(u []uint8) {
	m.jwk = &u
}

// Jwk returns the value of the "jwk" field in the mutation.
func (m *PrivateKeyMutation) Jwk() (r []uint8, exists bool) {
	v := m.jwk
	if v == nil {
		return
	}
	return *v, true
}

// OldJwk returns the old "jwk" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldJwk(ctx context.Context) (v []uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJwk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJwk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJwk: %w", err)
	}
	return oldValue.Jwk, nil
}

// ResetJwk resets all changes to the "jwk" field.
func (m *PrivateKeyMutation) ResetJwk() {
	m.jwk = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PrivateKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PrivateKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PrivateKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PrivateKeyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PrivateKeyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PrivateKey entity.
// If the PrivateKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateKeyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PrivateKeyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PrivateKeyMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PrivateKeyMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PrivateKeyMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PrivateKeyMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PrivateKeyMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PrivateKeyMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PrivateKeyMutation builder.
func (m *PrivateKeyMutation) Where(ps ...predicate.PrivateKey) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PrivateKeyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PrivateKey).
func (m *PrivateKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrivateKeyMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.kty != nil {
		fields = append(fields, privatekey.FieldKty)
	}
	if m.alg != nil {
		fields = append(fields, privatekey.FieldAlg)
	}
	if m.jwk != nil {
		fields = append(fields, privatekey.FieldJwk)
	}
	if m.created_at != nil {
		fields = append(fields, privatekey.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, privatekey.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrivateKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case privatekey.FieldKty:
		return m.Kty()
	case privatekey.FieldAlg:
		return m.Alg()
	case privatekey.FieldJwk:
		return m.Jwk()
	case privatekey.FieldCreatedAt:
		return m.CreatedAt()
	case privatekey.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrivateKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case privatekey.FieldKty:
		return m.OldKty(ctx)
	case privatekey.FieldAlg:
		return m.OldAlg(ctx)
	case privatekey.FieldJwk:
		return m.OldJwk(ctx)
	case privatekey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case privatekey.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PrivateKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case privatekey.FieldKty:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKty(v)
		return nil
	case privatekey.FieldAlg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlg(v)
		return nil
	case privatekey.FieldJwk:
		v, ok := value.([]uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJwk(v)
		return nil
	case privatekey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case privatekey.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PrivateKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrivateKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrivateKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PrivateKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrivateKeyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(privatekey.FieldAlg) {
		fields = append(fields, privatekey.FieldAlg)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrivateKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrivateKeyMutation) ClearField(name string) error {
	switch name {
	case privatekey.FieldAlg:
		m.ClearAlg()
		return nil
	}
	return fmt.Errorf("unknown PrivateKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrivateKeyMutation) ResetField(name string) error {
	switch name {
	case privatekey.FieldKty:
		m.ResetKty()
		return nil
	case privatekey.FieldAlg:
		m.ResetAlg()
		return nil
	case privatekey.FieldJwk:
		m.ResetJwk()
		return nil
	case privatekey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case privatekey.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PrivateKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrivateKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, privatekey.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrivateKeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case privatekey.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrivateKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrivateKeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrivateKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, privatekey.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrivateKeyMutation) EdgeCleared(name string) bool {
	switch name {
	case privatekey.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrivateKeyMutation) ClearEdge(name string) error {
	switch name {
	case privatekey.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown PrivateKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrivateKeyMutation) ResetEdge(name string) error {
	switch name {
	case privatekey.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown PrivateKey edge %s", name)
}

// PublicKeyMutation represents an operation that mutates the PublicKey nodes in the graph.
type PublicKeyMutation struct {
	config
	op            Op
	typ           string
	id            *string
	kty           *string
	alg           *string
	jwk           *[]uint8
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PublicKey, error)
	predicates    []predicate.PublicKey
}

var _ ent.Mutation = (*PublicKeyMutation)(nil)

// publickeyOption allows management of the mutation configuration using functional options.
type publickeyOption func(*PublicKeyMutation)

// newPublicKeyMutation creates new mutation for the PublicKey entity.
func newPublicKeyMutation(c config, op Op, opts ...publickeyOption) *PublicKeyMutation {
	m := &PublicKeyMutation{
		config:        c,
		op:            op,
		typ:           TypePublicKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPublicKeyID sets the ID field of the mutation.
func withPublicKeyID(id string) publickeyOption {
	return func(m *PublicKeyMutation) {
		var (
			err   error
			once  sync.Once
			value *PublicKey
		)
		m.oldValue = func(ctx context.Context) (*PublicKey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PublicKey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPublicKey sets the old PublicKey of the mutation.
func withPublicKey(node *PublicKey) publickeyOption {
	return func(m *PublicKeyMutation) {
		m.oldValue = func(context.Context) (*PublicKey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PublicKeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PublicKeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PublicKey entities.
func (m *PublicKeyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PublicKeyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PublicKeyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PublicKey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKty sets the "kty" field.
func (m *PublicKeyMutation) SetKty(s string) {
	m.kty = &s
}

// Kty returns the value of the "kty" field in the mutation.
func (m *PublicKeyMutation) Kty() (r string, exists bool) {
	v := m.kty
	if v == nil {
		return
	}
	return *v, true
}

// OldKty returns the old "kty" field's value of the PublicKey entity.
// If the PublicKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyMutation) OldKty(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKty: %w", err)
	}
	return oldValue.Kty, nil
}

// ResetKty resets all changes to the "kty" field.
func (m *PublicKeyMutation) ResetKty() {
	m.kty = nil
}

// SetAlg sets the "alg" field.
func (m *PublicKeyMutation) SetAlg(s string) {
	m.alg = &s
}

// Alg returns the value of the "alg" field in the mutation.
func (m *PublicKeyMutation) Alg() (r string, exists bool) {
	v := m.alg
	if v == nil {
		return
	}
	return *v, true
}

// OldAlg returns the old "alg" field's value of the PublicKey entity.
// If the PublicKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyMutation) OldAlg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlg: %w", err)
	}
	return oldValue.Alg, nil
}

// ClearAlg clears the value of the "alg" field.
func (m *PublicKeyMutation) ClearAlg() {
	m.alg = nil
	m.clearedFields[publickey.FieldAlg] = struct{}{}
}

// AlgCleared returns if the "alg" field was cleared in this mutation.
func (m *PublicKeyMutation) AlgCleared() bool {
	_, ok := m.clearedFields[publickey.FieldAlg]
	return ok
}

// ResetAlg resets all changes to the "alg" field.
func (m *PublicKeyMutation) ResetAlg() {
	m.alg = nil
	delete(m.clearedFields, publickey.FieldAlg)
}

// SetJwk sets the "jwk" field.
func (m *PublicKeyMutation) SetJwk(u []uint8) {
	m.jwk = &u
}

// Jwk returns the value of the "jwk" field in the mutation.
func (m *PublicKeyMutation) Jwk() (r []uint8, exists bool) {
	v := m.jwk
	if v == nil {
		return
	}
	return *v, true
}

// OldJwk returns the old "jwk" field's value of the PublicKey entity.
// If the PublicKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyMutation) OldJwk(ctx context.Context) (v []uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJwk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJwk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJwk: %w", err)
	}
	return oldValue.Jwk, nil
}

// ResetJwk resets all changes to the "jwk" field.
func (m *PublicKeyMutation) ResetJwk() {
	m.jwk = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PublicKeyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PublicKeyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PublicKey entity.
// If the PublicKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PublicKeyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PublicKeyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PublicKeyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PublicKey entity.
// If the PublicKey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PublicKeyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PublicKeyMutation builder.
func (m *PublicKeyMutation) Where(ps ...predicate.PublicKey) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PublicKeyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PublicKey).
func (m *PublicKeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PublicKeyMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.kty != nil {
		fields = append(fields, publickey.FieldKty)
	}
	if m.alg != nil {
		fields = append(fields, publickey.FieldAlg)
	}
	if m.jwk != nil {
		fields = append(fields, publickey.FieldJwk)
	}
	if m.created_at != nil {
		fields = append(fields, publickey.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, publickey.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PublicKeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case publickey.FieldKty:
		return m.Kty()
	case publickey.FieldAlg:
		return m.Alg()
	case publickey.FieldJwk:
		return m.Jwk()
	case publickey.FieldCreatedAt:
		return m.CreatedAt()
	case publickey.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PublicKeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case publickey.FieldKty:
		return m.OldKty(ctx)
	case publickey.FieldAlg:
		return m.OldAlg(ctx)
	case publickey.FieldJwk:
		return m.OldJwk(ctx)
	case publickey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case publickey.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PublicKey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PublicKeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case publickey.FieldKty:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKty(v)
		return nil
	case publickey.FieldAlg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlg(v)
		return nil
	case publickey.FieldJwk:
		v, ok := value.([]uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJwk(v)
		return nil
	case publickey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case publickey.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PublicKey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PublicKeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PublicKeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PublicKeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PublicKey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PublicKeyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(publickey.FieldAlg) {
		fields = append(fields, publickey.FieldAlg)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PublicKeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PublicKeyMutation) ClearField(name string) error {
	switch name {
	case publickey.FieldAlg:
		m.ClearAlg()
		return nil
	}
	return fmt.Errorf("unknown PublicKey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PublicKeyMutation) ResetField(name string) error {
	switch name {
	case publickey.FieldKty:
		m.ResetKty()
		return nil
	case publickey.FieldAlg:
		m.ResetAlg()
		return nil
	case publickey.FieldJwk:
		m.ResetJwk()
		return nil
	case publickey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case publickey.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PublicKey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PublicKeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PublicKeyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PublicKeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PublicKeyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PublicKeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PublicKeyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PublicKeyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PublicKey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PublicKeyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PublicKey edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *string
	name                    *string
	displayname             *string
	_type                   *string
	password                *[]byte
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	keys                    map[string]struct{}
	removedkeys             map[string]struct{}
	clearedkeys             bool
	dids                    map[string]struct{}
	removeddids             map[string]struct{}
	cleareddids             bool
	credentials             map[string]struct{}
	removedcredentials      map[string]struct{}
	clearedcredentials      bool
	authncredentials        map[string]struct{}
	removedauthncredentials map[string]struct{}
	clearedauthncredentials bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetDisplayname sets the "displayname" field.
func (m *UserMutation) SetDisplayname(s string) {
	m.displayname = &s
}

// Displayname returns the value of the "displayname" field in the mutation.
func (m *UserMutation) Displayname() (r string, exists bool) {
	v := m.displayname
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayname returns the old "displayname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDisplayname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayname: %w", err)
	}
	return oldValue.Displayname, nil
}

// ClearDisplayname clears the value of the "displayname" field.
func (m *UserMutation) ClearDisplayname() {
	m.displayname = nil
	m.clearedFields[user.FieldDisplayname] = struct{}{}
}

// DisplaynameCleared returns if the "displayname" field was cleared in this mutation.
func (m *UserMutation) DisplaynameCleared() bool {
	_, ok := m.clearedFields[user.FieldDisplayname]
	return ok
}

// ResetDisplayname resets all changes to the "displayname" field.
func (m *UserMutation) ResetDisplayname() {
	m.displayname = nil
	delete(m.clearedFields, user.FieldDisplayname)
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddKeyIDs adds the "keys" edge to the PrivateKey entity by ids.
func (m *UserMutation) AddKeyIDs(ids ...string) {
	if m.keys == nil {
		m.keys = make(map[string]struct{})
	}
	for i := range ids {
		m.keys[ids[i]] = struct{}{}
	}
}

// ClearKeys clears the "keys" edge to the PrivateKey entity.
func (m *UserMutation) ClearKeys() {
	m.clearedkeys = true
}

// KeysCleared reports if the "keys" edge to the PrivateKey entity was cleared.
func (m *UserMutation) KeysCleared() bool {
	return m.clearedkeys
}

// RemoveKeyIDs removes the "keys" edge to the PrivateKey entity by IDs.
func (m *UserMutation) RemoveKeyIDs(ids ...string) {
	if m.removedkeys == nil {
		m.removedkeys = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.keys, ids[i])
		m.removedkeys[ids[i]] = struct{}{}
	}
}

// RemovedKeys returns the removed IDs of the "keys" edge to the PrivateKey entity.
func (m *UserMutation) RemovedKeysIDs() (ids []string) {
	for id := range m.removedkeys {
		ids = append(ids, id)
	}
	return
}

// KeysIDs returns the "keys" edge IDs in the mutation.
func (m *UserMutation) KeysIDs() (ids []string) {
	for id := range m.keys {
		ids = append(ids, id)
	}
	return
}

// ResetKeys resets all changes to the "keys" edge.
func (m *UserMutation) ResetKeys() {
	m.keys = nil
	m.clearedkeys = false
	m.removedkeys = nil
}

// AddDidIDs adds the "dids" edge to the DID entity by ids.
func (m *UserMutation) AddDidIDs(ids ...string) {
	if m.dids == nil {
		m.dids = make(map[string]struct{})
	}
	for i := range ids {
		m.dids[ids[i]] = struct{}{}
	}
}

// ClearDids clears the "dids" edge to the DID entity.
func (m *UserMutation) ClearDids() {
	m.cleareddids = true
}

// DidsCleared reports if the "dids" edge to the DID entity was cleared.
func (m *UserMutation) DidsCleared() bool {
	return m.cleareddids
}

// RemoveDidIDs removes the "dids" edge to the DID entity by IDs.
func (m *UserMutation) RemoveDidIDs(ids ...string) {
	if m.removeddids == nil {
		m.removeddids = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.dids, ids[i])
		m.removeddids[ids[i]] = struct{}{}
	}
}

// RemovedDids returns the removed IDs of the "dids" edge to the DID entity.
func (m *UserMutation) RemovedDidsIDs() (ids []string) {
	for id := range m.removeddids {
		ids = append(ids, id)
	}
	return
}

// DidsIDs returns the "dids" edge IDs in the mutation.
func (m *UserMutation) DidsIDs() (ids []string) {
	for id := range m.dids {
		ids = append(ids, id)
	}
	return
}

// ResetDids resets all changes to the "dids" edge.
func (m *UserMutation) ResetDids() {
	m.dids = nil
	m.cleareddids = false
	m.removeddids = nil
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by ids.
func (m *UserMutation) AddCredentialIDs(ids ...string) {
	if m.credentials == nil {
		m.credentials = make(map[string]struct{})
	}
	for i := range ids {
		m.credentials[ids[i]] = struct{}{}
	}
}

// ClearCredentials clears the "credentials" edge to the Credential entity.
func (m *UserMutation) ClearCredentials() {
	m.clearedcredentials = true
}

// CredentialsCleared reports if the "credentials" edge to the Credential entity was cleared.
func (m *UserMutation) CredentialsCleared() bool {
	return m.clearedcredentials
}

// RemoveCredentialIDs removes the "credentials" edge to the Credential entity by IDs.
func (m *UserMutation) RemoveCredentialIDs(ids ...string) {
	if m.removedcredentials == nil {
		m.removedcredentials = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.credentials, ids[i])
		m.removedcredentials[ids[i]] = struct{}{}
	}
}

// RemovedCredentials returns the removed IDs of the "credentials" edge to the Credential entity.
func (m *UserMutation) RemovedCredentialsIDs() (ids []string) {
	for id := range m.removedcredentials {
		ids = append(ids, id)
	}
	return
}

// CredentialsIDs returns the "credentials" edge IDs in the mutation.
func (m *UserMutation) CredentialsIDs() (ids []string) {
	for id := range m.credentials {
		ids = append(ids, id)
	}
	return
}

// ResetCredentials resets all changes to the "credentials" edge.
func (m *UserMutation) ResetCredentials() {
	m.credentials = nil
	m.clearedcredentials = false
	m.removedcredentials = nil
}

// AddAuthncredentialIDs adds the "authncredentials" edge to the WebauthnCredential entity by ids.
func (m *UserMutation) AddAuthncredentialIDs(ids ...string) {
	if m.authncredentials == nil {
		m.authncredentials = make(map[string]struct{})
	}
	for i := range ids {
		m.authncredentials[ids[i]] = struct{}{}
	}
}

// ClearAuthncredentials clears the "authncredentials" edge to the WebauthnCredential entity.
func (m *UserMutation) ClearAuthncredentials() {
	m.clearedauthncredentials = true
}

// AuthncredentialsCleared reports if the "authncredentials" edge to the WebauthnCredential entity was cleared.
func (m *UserMutation) AuthncredentialsCleared() bool {
	return m.clearedauthncredentials
}

// RemoveAuthncredentialIDs removes the "authncredentials" edge to the WebauthnCredential entity by IDs.
func (m *UserMutation) RemoveAuthncredentialIDs(ids ...string) {
	if m.removedauthncredentials == nil {
		m.removedauthncredentials = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.authncredentials, ids[i])
		m.removedauthncredentials[ids[i]] = struct{}{}
	}
}

// RemovedAuthncredentials returns the removed IDs of the "authncredentials" edge to the WebauthnCredential entity.
func (m *UserMutation) RemovedAuthncredentialsIDs() (ids []string) {
	for id := range m.removedauthncredentials {
		ids = append(ids, id)
	}
	return
}

// AuthncredentialsIDs returns the "authncredentials" edge IDs in the mutation.
func (m *UserMutation) AuthncredentialsIDs() (ids []string) {
	for id := range m.authncredentials {
		ids = append(ids, id)
	}
	return
}

// ResetAuthncredentials resets all changes to the "authncredentials" edge.
func (m *UserMutation) ResetAuthncredentials() {
	m.authncredentials = nil
	m.clearedauthncredentials = false
	m.removedauthncredentials = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.displayname != nil {
		fields = append(fields, user.FieldDisplayname)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldDisplayname:
		return m.Displayname()
	case user.FieldType:
		return m.GetType()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldDisplayname:
		return m.OldDisplayname(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldDisplayname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayname(v)
		return nil
	case user.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case user.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDisplayname) {
		fields = append(fields, user.FieldDisplayname)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDisplayname:
		m.ClearDisplayname()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldDisplayname:
		m.ResetDisplayname()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.keys != nil {
		edges = append(edges, user.EdgeKeys)
	}
	if m.dids != nil {
		edges = append(edges, user.EdgeDids)
	}
	if m.credentials != nil {
		edges = append(edges, user.EdgeCredentials)
	}
	if m.authncredentials != nil {
		edges = append(edges, user.EdgeAuthncredentials)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.keys))
		for id := range m.keys {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDids:
		ids := make([]ent.Value, 0, len(m.dids))
		for id := range m.dids {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCredentials:
		ids := make([]ent.Value, 0, len(m.credentials))
		for id := range m.credentials {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAuthncredentials:
		ids := make([]ent.Value, 0, len(m.authncredentials))
		for id := range m.authncredentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedkeys != nil {
		edges = append(edges, user.EdgeKeys)
	}
	if m.removeddids != nil {
		edges = append(edges, user.EdgeDids)
	}
	if m.removedcredentials != nil {
		edges = append(edges, user.EdgeCredentials)
	}
	if m.removedauthncredentials != nil {
		edges = append(edges, user.EdgeAuthncredentials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.removedkeys))
		for id := range m.removedkeys {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDids:
		ids := make([]ent.Value, 0, len(m.removeddids))
		for id := range m.removeddids {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCredentials:
		ids := make([]ent.Value, 0, len(m.removedcredentials))
		for id := range m.removedcredentials {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAuthncredentials:
		ids := make([]ent.Value, 0, len(m.removedauthncredentials))
		for id := range m.removedauthncredentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedkeys {
		edges = append(edges, user.EdgeKeys)
	}
	if m.cleareddids {
		edges = append(edges, user.EdgeDids)
	}
	if m.clearedcredentials {
		edges = append(edges, user.EdgeCredentials)
	}
	if m.clearedauthncredentials {
		edges = append(edges, user.EdgeAuthncredentials)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeKeys:
		return m.clearedkeys
	case user.EdgeDids:
		return m.cleareddids
	case user.EdgeCredentials:
		return m.clearedcredentials
	case user.EdgeAuthncredentials:
		return m.clearedauthncredentials
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeKeys:
		m.ResetKeys()
		return nil
	case user.EdgeDids:
		m.ResetDids()
		return nil
	case user.EdgeCredentials:
		m.ResetCredentials()
		return nil
	case user.EdgeAuthncredentials:
		m.ResetAuthncredentials()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WebauthnCredentialMutation represents an operation that mutates the WebauthnCredential nodes in the graph.
type WebauthnCredentialMutation struct {
	config
	op            Op
	typ           string
	id            *string
	create_time   *time.Time
	update_time   *time.Time
	credential    *webauthn.Credential
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*WebauthnCredential, error)
	predicates    []predicate.WebauthnCredential
}

var _ ent.Mutation = (*WebauthnCredentialMutation)(nil)

// webauthncredentialOption allows management of the mutation configuration using functional options.
type webauthncredentialOption func(*WebauthnCredentialMutation)

// newWebauthnCredentialMutation creates new mutation for the WebauthnCredential entity.
func newWebauthnCredentialMutation(c config, op Op, opts ...webauthncredentialOption) *WebauthnCredentialMutation {
	m := &WebauthnCredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeWebauthnCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebauthnCredentialID sets the ID field of the mutation.
func withWebauthnCredentialID(id string) webauthncredentialOption {
	return func(m *WebauthnCredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *WebauthnCredential
		)
		m.oldValue = func(ctx context.Context) (*WebauthnCredential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebauthnCredential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebauthnCredential sets the old WebauthnCredential of the mutation.
func withWebauthnCredential(node *WebauthnCredential) webauthncredentialOption {
	return func(m *WebauthnCredentialMutation) {
		m.oldValue = func(context.Context) (*WebauthnCredential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebauthnCredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebauthnCredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WebauthnCredential entities.
func (m *WebauthnCredentialMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebauthnCredentialMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebauthnCredentialMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebauthnCredential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *WebauthnCredentialMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WebauthnCredentialMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WebauthnCredentialMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *WebauthnCredentialMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *WebauthnCredentialMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *WebauthnCredentialMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCredential sets the "credential" field.
func (m *WebauthnCredentialMutation) SetCredential(w webauthn.Credential) {
	m.credential = &w
}

// Credential returns the value of the "credential" field in the mutation.
func (m *WebauthnCredentialMutation) Credential() (r webauthn.Credential, exists bool) {
	v := m.credential
	if v == nil {
		return
	}
	return *v, true
}

// OldCredential returns the old "credential" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldCredential(ctx context.Context) (v webauthn.Credential, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredential is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredential requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredential: %w", err)
	}
	return oldValue.Credential, nil
}

// ResetCredential resets all changes to the "credential" field.
func (m *WebauthnCredentialMutation) ResetCredential() {
	m.credential = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *WebauthnCredentialMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *WebauthnCredentialMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WebauthnCredentialMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *WebauthnCredentialMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WebauthnCredentialMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WebauthnCredentialMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the WebauthnCredentialMutation builder.
func (m *WebauthnCredentialMutation) Where(ps ...predicate.WebauthnCredential) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WebauthnCredentialMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WebauthnCredential).
func (m *WebauthnCredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebauthnCredentialMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, webauthncredential.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, webauthncredential.FieldUpdateTime)
	}
	if m.credential != nil {
		fields = append(fields, webauthncredential.FieldCredential)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebauthnCredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webauthncredential.FieldCreateTime:
		return m.CreateTime()
	case webauthncredential.FieldUpdateTime:
		return m.UpdateTime()
	case webauthncredential.FieldCredential:
		return m.Credential()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebauthnCredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webauthncredential.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case webauthncredential.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case webauthncredential.FieldCredential:
		return m.OldCredential(ctx)
	}
	return nil, fmt.Errorf("unknown WebauthnCredential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnCredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webauthncredential.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case webauthncredential.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case webauthncredential.FieldCredential:
		v, ok := value.(webauthn.Credential)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredential(v)
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebauthnCredentialMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebauthnCredentialMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnCredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WebauthnCredential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebauthnCredentialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebauthnCredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebauthnCredentialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WebauthnCredential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebauthnCredentialMutation) ResetField(name string) error {
	switch name {
	case webauthncredential.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case webauthncredential.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case webauthncredential.FieldCredential:
		m.ResetCredential()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebauthnCredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, webauthncredential.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebauthnCredentialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case webauthncredential.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebauthnCredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebauthnCredentialMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebauthnCredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, webauthncredential.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebauthnCredentialMutation) EdgeCleared(name string) bool {
	switch name {
	case webauthncredential.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebauthnCredentialMutation) ClearEdge(name string) error {
	switch name {
	case webauthncredential.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebauthnCredentialMutation) ResetEdge(name string) error {
	switch name {
	case webauthncredential.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential edge %s", name)
}
